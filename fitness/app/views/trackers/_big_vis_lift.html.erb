<script style="text/javascript">
	
	// Dimensions and colors
	var w = 500;
	var h = 350;
	var legW = 130;

	var xPadding = 45;
	var yPadding = 20;

	var progressWidth = 75;
	var progressHeight = 150;
	var curY = yPadding + 25;

	var mainCircleColor = "#3FB8AF";
	var highlightColor = "#FF3D7F";
	var opacity = 1;


	// Read the data into an array
	dataset = []
	<% tracker.points.each do |p| %>
		var curPoint = [];
		curPoint.push(<%= p.created_at.strftime('%s') %>);
		curPoint.push(<%= p.data %>);
		curPoint.push(<%= p.aux_data %>);
		dataset.push(curPoint);
	<% end %>

	generateVis(dataset);

	d3.selection.prototype.moveToFront = function() {
		return this.each(function() {
			this.parentNode.appendChild(this);
		});
	};

	// Create the visualization with the given dataset
	function generateVis(dataset) {
		var xScale = d3.scale.linear()
							 .domain([d3.min(dataset, function(d) { return d[0]; })-1,
									  d3.max(dataset, function(d) { return d[0]; })+1])
							 .range([xPadding, w - xPadding]);

		var yScale = d3.scale.linear()
							 .domain([0, d3.max(dataset, function(d) { return d[1]; })])
							 .range([h - yPadding, yPadding]);

		var rScale = d3.scale.linear()
							 .domain([d3.min(dataset, function(d) { return d[2]; }),
							 		  d3.max(dataset, function(d) { return d[2]; })])
							 .range([5, 20]);


		var radius = 10;

		var formatAsDate = function(d) { 
			var date = new Date(null);  
			date.setTime(d * 1000);
			return date.toLocaleDateString();
		};
		var formatAsUnits = function(d) { return d; };


		// Create SVG element
		var svg = d3.select("#big-svg-container-" + "<%= tracker.id %>")
					.append("svg")
					.attr("id", "svg" + <%= tracker.id %>)
					.attr("width", w)
					.attr("height", h);

		// Define X axis
		var xAxis = d3.svg.axis()
						  .scale(xScale)
						  .orient("bottom")
						  .ticks(5)
						  .tickFormat(formatAsDate);

		// Define Y axis
		var yAxis = d3.svg.axis()
						  .scale(yScale)
						  .orient("left")
						  .ticks(10)
						  .tickFormat(formatAsUnits);

		// Y axis label
		svg.append("text")
			.attr("id", "y-axis-label")
			.attr("class", "axis-label")
	        .attr("x", 0-(h/2))
	        .attr("y", 10)
	        .attr("transform", "rotate(-90) translate(0, 0)")
	        .style("text-anchor", "middle")
	        .text('<%= tracker.units %>');

		// Create circles
		svg.selectAll("circle")
			.data(dataset)
			.enter()
			.append("circle")
			.attr("cx", function(d) {
		   		return xScale(d[0]);
		    })
		    .attr("cy", function(d) {
		   		return yScale(d[1]);
			})
			.attr("r", function(d) {
				return rScale(d[2]);
			})
			.attr("fill", function(d) {
				return mainCircleColor;
			})
			.attr("opacity", opacity)
			.on("mouseover", function(d, i) {

				// Change color
				d3.select(this).attr("fill", highlightColor);

				// Show the tooltip
				var xPosition = parseInt(d3.select(this).attr("cx")) + document.getElementById("svg" + <%= tracker.id %>).offsetLeft + 1.5*radius;
				var yPosition = parseInt(d3.select(this).attr("cy")) + document.getElementById("svg" + <%= tracker.id %>).offsetTop + 6*radius;
				d3.select("#tooltip")
					.style("left", xPosition + "px")
					.style("top", yPosition + "px");

				var date = new Date(null);
				date.setTime(d[0] * 1000);
				d3.select("#point-time").text(date.toLocaleString());
				d3.select("#point-value").html(d[1] + " <%= tracker.units %>" + " at " + d[2] + " <%= tracker.aux_units %>");
				d3.select("#tooltip").classed("hidden", false);

				// Update goal fill
				<% if tracker.goal != nil %>
					d3.select("#progress-bar-"+i).attr("opacity", 1).moveToFront();
				<% end %>
			})
			.on("mouseout", function(d, i) {
				// Restore color
				d3.select(this).attr("fill", mainCircleColor);

				// Hide the tooltip
				d3.select("#tooltip").classed("hidden", true);

				// Update goal fill
				<% if tracker.goal != nil %>
					d3.select("#progress-bar-"+i).attr("opacity", 0.3).moveToFront();
				<% end %>

			});

		// Create X axis
		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + (h - yPadding) + ")")
			.call(xAxis);
		
		// Create Y axis
		svg.append("g")
			.attr("class", "y axis")
			.attr("transform", "translate(" + xPadding + ",0)")
			.call(yAxis);

		// Create legend SVG element
		var legSvg = d3.select("#big-svg-container-" + "<%= tracker.id %>")
				.append("svg")
				.attr("class", "leg-svg")
				.attr("id", "leg-svg" + <%= tracker.id %>)
				.attr("width", legW)
				.attr("height", h);
		legSvg.append("text")
				.attr("class", "legend-header")
				.attr("text-anchor", "middle")
				.attr("x", legW/2)
				.attr("y", yPadding)
				.text("Legend");

		var curY = yPadding + 20;

		// Add radio buttons to toggle scale between reps and weight
		var repsButton = legSvg.append("g")
								.attr("class", "svg-radio-button radio-button-disabled")
								.attr("id", "reps")
								.attr("fill", "rgba(255,255,255,0)")
								.attr("transform", "translate(7," + curY + ")");
		repsButton.append("circle")
					.attr("class", "svg-radio-outer")
					.attr("r", 6)
					.attr("stroke", highlightColor)
					.attr("stroke-width", 2);
		repsButton.append("circle")
					.attr("class", "svg-radio-inner")
					.attr("r", 3)
					.attr("stroke", highlightColor)
					.attr("fill", highlightColor);
		repsButton.append("text")
					.attr("class", "legend-text")
					.attr("text-anchor", "left")
					.attr("fill", "black")
					.attr("transform", "translate(12, 5)")
					.text("Show reps");
		var curSelection = repsButton;

		curY += 20;
		var weightButton = legSvg.append("g")
								.attr("class", "svg-radio-button radio-button-disabled")
								.attr("id", "weight")
								.attr("fill", "rgba(255,255,255,0)")
								.attr("transform", "translate(7," + curY + ")");
		weightButton.append("circle")
					.attr("class", "svg-radio-outer")
					.attr("r", 6)
					.attr("stroke", highlightColor)
					.attr("stroke-width", 2);
		weightButton.append("circle")
					.attr("class", "svg-radio-inner")
					.attr("r", 0)
					.attr("stroke", highlightColor)
					.attr("fill", highlightColor);
		weightButton.append("text")
					.attr("class", "legend-text")
					.attr("text-anchor", "left")
					.attr("fill", "black")
					.attr("transform", "translate(12, 5)")
					.text("Show weight");
		curY += 30;


		// Toggle view based on user selection
		d3.selectAll('.svg-radio-button')
			.on("click", function(d) {
				d3.select(this).select(".svg-radio-inner")
					.attr("r", 3);
				curSelection.select(".svg-radio-inner")
					.attr("r", 0);

				curSelection = d3.select(this);

				// Update y and r scales
				var yIndex = (curSelection.attr("id")=="reps") ? 1 : 2;
				var rIndex = (curSelection.attr("id")=="reps") ? 2 : 1;
				yScale.domain([0, d3.max(dataset, function(d) { return d[yIndex]; })]);
				rScale.domain([d3.min(dataset, function(d) { return d[rIndex]; }),
							   d3.max(dataset, function(d) { return d[rIndex]; })]);


				// Move circles
				svg.selectAll("circle")
					.transition()
					.duration(300)
					.attr("cy", function(d) {
						return yScale(d[yIndex]);
					})
					.attr("r", function(d) {
						return rScale(d[rIndex]);
					});

				// Update y axis 
				svg.select(".y.axis")
                    .transition()
                    .duration(300)
                        .call(yAxis);

				svg.select("#y-axis-label")
					.text(curSelection.attr("id"));
			});
	
		// Write goal if any
		// Draw goal legend and progress bar
		<% if tracker.goal != nil %>
			legSvg.append("text")
				.attr("class", "legend-header")
				.attr("text-anchor", "middle")
				.attr("x", legW/2)
				.attr("y", curY)
				.text("Goal");

			curY += 20;

			legSvg.append("text")
					.attr("class", "legend-text")
					.attr("text-anchor", "middle")
					.attr("x", legW/2)
					.attr("y", curY)
					.text("<%= tracker.goal %> <%= tracker.units %> in");
			curY += 15;
			legSvg.append("text")
					.attr("class", "legend-text")
					.attr("text-anchor", "middle")
					.attr("x", legW/2)
					.attr("y", curY)
					.text("<%= tracker.aux_goal %> <%= tracker.aux_units %>");

			curY += 15;


			// Outline for progress bar
			legSvg.append("rect")
					.attr("x", legW / 2 - progressWidth / 2)
					.attr("y", curY)
					.attr("rx", 3)
					.attr("ry", 3)
					.attr("width", progressWidth)
					.attr("height", progressHeight)
					.attr("stroke", highlightColor)
					.attr("stroke-width", 2)
					.attr("fill", "white")
					.attr("opacity", 0.5);

			// Individual rectangles
			var goalWeight = <%= tracker.aux_goal %>;
			var goalReps = <%= tracker.goal %>;
			legSvg.selectAll(".progress-bar")
					.data(dataset)
					.enter()
					.append("rect")
					.attr("class", "progress-bar")
					.attr("id", function(d, i) { return "progress-bar-"+i; })
					.attr("x", legW / 2 - progressWidth / 2)
					.attr("y", function(d) {
						var repsPercent = Math.min(1, (d[1] / goalReps));
						return curY + progressHeight - (repsPercent*progressHeight);
					})
					.attr("rx", 3)
					.attr("ry", 3)
					.attr("width", function(d) {
						var weightPercent = Math.min(1, (d[2] / goalWeight));
						return weightPercent*progressWidth;
					})
					.attr("height", function(d) {
						var repsPercent = Math.min(1, (d[1] / goalReps));
						return repsPercent*progressHeight;
					})
					.attr("stroke", "none")
					.attr("fill", highlightColor)
					.attr("opacity", 0.3);


			// Progress bar text		
			legSvg.append("text")
					.attr("id", "legy-axis-label")
					.attr("class", "axis-label")
			        .attr("x", 0-(curY + progressHeight/2))
			        .attr("y", 20)
			        .attr("transform", "rotate(-90) translate(0, 0)")
			        .style("text-anchor", "middle")
			        .text('<%= tracker.units %>');
			legSvg.append("text")
					.attr("id", "legx-axis-label")
					.attr("class", "axis-label")
			        .attr("x", legW/2)
			        .attr("y", curY + progressHeight + 15)
			        .style("text-anchor", "middle")
			        .text('<%= tracker.aux_units %>');

		<% end %>

	}

</script>