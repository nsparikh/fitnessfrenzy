<script style="text/javascript">

	// Dimensions and colors
	var w = 500;
	var h = 350;
	var legW = 130;

	var xPadding = 45;
	var yPadding = 20;
	var curY = yPadding + 25;

	var mainCircleColor = "#3FB8AF";
	var highlightColor = "#FF3D7F";
	var opacity = 1;

	var progressWidth = 75;
	var progressHeight = 120;


	// Read the data into an array
	dataset = [];
	<% tracker.points.each do |p| %>
		var curPoint = [];
		curPoint.push(<%= p.created_at.strftime('%s') %>);
		curPoint.push(<%= p.data %>);
		dataset.push(curPoint);
	<% end %>

	generateVis(dataset);

	// Create the visualization with the given dataset
	function generateVis(dataset) {
		var xScale = d3.scale.linear()
							 .domain([d3.min(dataset, function(d) { return d[0]; })-1,
									  d3.max(dataset, function(d) { return d[0]; })+1])
							 .range([xPadding, w - xPadding]);

		var maxY = d3.max(dataset, function(d) { return d[1]; });
		<% if tracker.goal != nil %>
			var datasetWithGoal = dataset.slice(0);
			datasetWithGoal.push([0, <%=tracker.goal%>]);
			maxY = d3.max(datasetWithGoal, function(d) { return d[1]; });
		<% end %>
		var yScale = d3.scale.linear()
							 .domain([0, maxY])
							 .range([h - yPadding, yPadding]);

		
		var radius = 8;

		var lineFunction = d3.svg.line()
		                          .x(function(d) { return xScale(d[0]); })
		                          .y(function(d) { return yScale(d[1]); })
		                          .interpolate("linear");

		var formatAsDate = function(d) { 
			var date = new Date(null);  
			date.setTime(d * 1000);
			return date.toLocaleDateString();
		};
		var formatAsUnits = function(d) { return d; };


		// Create SVG element
		var svg = d3.select("#big-svg-container-" + "<%= tracker.id %>")
					.append("svg")
					.attr("id", "svg" + <%= tracker.id %>)
					.attr("width", w)
					.attr("height", h);


		// Define X axis
		var xAxis = d3.svg.axis()
						  .scale(xScale)
						  .orient("bottom")
						  .ticks(5)
						  .tickFormat(formatAsDate);

		// Define Y axis
		var yAxis = d3.svg.axis()
						  .scale(yScale)
						  .orient("left")
						  .ticks(10)
						  .tickFormat(formatAsUnits);

		// Y axis label
		svg.append("text")
			.attr("id", "y-axis-label")
			.attr("class", "axis-label")
	        .attr("x", 0-(h/2))
	        .attr("y", 10)
	        .attr("transform", "rotate(-90) translate(0, 0)")
	        .style("text-anchor", "middle")
	        .text('<%= tracker.units %>');


		// Draw lines connecting dots
		svg.append("path")
			.attr("d", lineFunction(dataset))
			.attr("id", "connector-path")
			.attr("stroke", mainCircleColor)
			.attr("stroke-width", 2)
			.attr("fill", "none");

		// Draw goal line if any
		<% if tracker.goal != nil %>
			svg.append("line")
				.attr("id", "goal-line")
	            .attr("x1", xScale(d3.min(dataset, function(d) { return d[0]; })-1))
	            .attr("y1", yScale(<%=tracker.goal%>))
	            .attr("x2", xScale(d3.max(dataset, function(d) { return d[0]; })+1))
	            .attr("y2", yScale(<%=tracker.goal%>))
				.attr("stroke", highlightColor)
				.attr("stroke-width", 2)
				.attr("fill", "none")
				.attr("opacity", 0.5);
		<% end %>

		// Create circles
		svg.selectAll("circle")
			.data(dataset)
			.enter()
			.append("circle")
			.attr("cx", function(d) {
		   		return xScale(d[0]);
		    })
		    .attr("cy", function(d) {
		   		return yScale(d[1]);
			})
			.attr("r", function(d) {
				return radius;
			})
			.attr("fill", function(d) {
				return mainCircleColor;
			})
			.attr("opacity", opacity)
			.on("mouseover", function(d) {

				// Change color
				d3.select(this).attr("fill", highlightColor);

				// Show the tooltip
				var xPosition = parseInt(d3.select(this).attr("cx")) + document.getElementById("svg" + <%= tracker.id %>).offsetLeft + 1.5*radius;
				var yPosition = parseInt(d3.select(this).attr("cy")) + document.getElementById("svg" + <%= tracker.id %>).offsetTop + 6*radius;
				d3.select("#tooltip")
					.style("left", xPosition + "px")
					.style("top", yPosition + "px");

				var date = new Date(null);
				date.setTime(d[0] * 1000);
				d3.select("#point-time").text(date.toLocaleString());
				d3.select("#point-value").html(d[1] + " <%= tracker.units %>");
				d3.select("#tooltip").classed("hidden", false);

				// Update goal fill
				<% if tracker.goal != nil %>
					var percent = Math.min(1, Math.max(0, (d[1] - dataset[0][1]) / (<%= tracker.goal %> - dataset[0][1])));
					d3.select("#progress-bar")
						.transition()
						.duration(80)
						.attr("height", percent * progressHeight)
						.attr("y", curY + progressHeight - (percent*progressHeight));

					d3.select("#progress-bar-text")
						.text((percent * 100).toFixed(0) + '%');
				<% end %>
			})
			.on("mouseout", function(d) {
				// Restore color
				d3.select(this).attr("fill", mainCircleColor);

				// Hide the tooltip
				d3.select("#tooltip").classed("hidden", true);

				// Update goal fill
				<% if tracker.goal != nil %>
					var percent = Math.min(1, Math.max(0, (dataset[dataset.length-1][1] - dataset[0][1]) / (<%= tracker.goal %> - dataset[0][1])));
					d3.select("#progress-bar")
						.transition()
						.duration(80)
						.attr("height", percent * progressHeight)
						.attr("y", curY + progressHeight - (percent*progressHeight));

					d3.select("#progress-bar-text")
						.text((percent * 100).toFixed(0) + '%');
				<% end %>
			});

		// Create X axis
		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + (h - yPadding) + ")")
			.call(xAxis);
		
		// Create Y axis
		svg.append("g")
			.attr("class", "y axis")
			.attr("transform", "translate(" + xPadding + ",0)")
			.call(yAxis);


		// Create legend SVG element
		var legSvg = d3.select("#big-svg-container-" + "<%= tracker.id %>")
				.append("svg")
				.attr("class", "leg-svg")
				.attr("id", "leg-svg" + <%= tracker.id %>)
				.attr("width", legW)
				.attr("height", h);
		legSvg.append("text")
				.attr("class", "legend-header")
				.attr("text-anchor", "middle")
				.attr("x", legW/2)
				.attr("y", yPadding)
				.text("Legend");

		

		// Add radio buttons to toggle scale between raw weight and percent change
		var rawButton = legSvg.append("g")
								.attr("class", "svg-radio-button radio-button-disabled")
								.attr("id", "raw")
								.attr("fill", "rgba(255,255,255,0)")
								.attr("transform", "translate(7," + curY + ")");
		rawButton.append("circle")
					.attr("class", "svg-radio-outer")
					.attr("r", 6)
					.attr("stroke", highlightColor)
					.attr("stroke-width", 2);
		rawButton.append("circle")
					.attr("class", "svg-radio-inner")
					.attr("r", 3)
					.attr("stroke", highlightColor)
					.attr("fill", highlightColor);
		rawButton.append("text")
					.attr("class", "legend-text")
					.attr("text-anchor", "left")
					.attr("fill", "black")
					.attr("transform", "translate(12, 5)")
					.text("Show raw data");
		var curSelection = rawButton;
		curY += 20;

		var percentButton = legSvg.append("g")
								.attr("class", "svg-radio-button radio-button-disabled")
								.attr("id", "percent")
								.attr("fill", "rgba(255,255,255,0)")
								.attr("transform", "translate(7," + curY + ")");
		percentButton.append("circle")
					.attr("class", "svg-radio-outer")
					.attr("r", 6)
					.attr("stroke", highlightColor)
					.attr("stroke-width", 2);
		percentButton.append("circle")
					.attr("class", "svg-radio-inner")
					.attr("r", 0)
					.attr("stroke", highlightColor)
					.attr("fill", highlightColor);
		percentButton.append("text")
					.attr("class", "legend-text")
					.attr("text-anchor", "left")
					.attr("fill", "black")
					.attr("transform", "translate(12, 5)")
					.text("Show % change");

		curY += 30;

		// Toggle view based on user selection
		d3.selectAll('.svg-radio-button')
			.on("click", function(d) {
				d3.select(this).select(".svg-radio-inner")
					.attr("r", 3);
				curSelection.select(".svg-radio-inner")
					.attr("r", 0);
				curSelection = d3.select(this);

				// Update y scale and circle positions
				if (curSelection.attr("id") == "raw") {
					yScale.domain([0, maxY]);
					d3.select("#goal-line").classed("hidden", false);

					svg.selectAll("circle")
						.transition()
						.duration(300)
						.attr("cy", function(d, i) {
							return yScale(d[1]);
						});

					// Update line
					lineFunction.y(function(d) {
						return yScale(d[1]);
					});


				} else {
					yScale.domain([d3.min(dataset, function(d, i) { return percentChange(d, i); }), 
						d3.max(dataset, function(d, i) { return percentChange(d, i); })]);
					d3.select("#goal-line").classed("hidden", true);

					svg.selectAll("circle")
						.transition()
						.duration(300)
						.attr("cy", function(d, i) {
							return yScale(percentChange(d, i));
						});

					// Update line
					lineFunction.y(function(d, i) {
						return yScale(percentChange(d, i));
					});
				}

				svg.select("#connector-path")
					.transition()
					.duration(300)
					.attr("d", lineFunction(dataset));

				// Update y axis 
				svg.select(".y.axis")
                    .transition()
                    .duration(300)
                    .call(yAxis);

				svg.select("#y-axis-label")
					.text((curSelection.attr("id")=="raw") ? "raw data" : "percent change");
			});

		// Draw goal legend and progress bar
		<% if tracker.goal != nil %>
			legSvg.append("rect")
					.attr("x", 1)
					.attr("y", curY)
					.attr("rx", 3)
					.attr("ry", 3)
				    .attr("width", 12)
				    .attr("height", 12)
		    		.style("fill", highlightColor)
		    		.attr("opacity", 0.5);

		    legSvg.append("text")
					.attr("class", "legend-text")
					.attr("text-anchor", "left")
					.attr("x", 17)
					.attr("y", curY + 9)
					.text("goal: <%= tracker.goal.round(2) %> <%= tracker.units %>");
			curY += 30;

			var percent = Math.min(1, Math.max(0, (dataset[dataset.length-1][1] - dataset[0][1]) / (<%= tracker.goal %> - dataset[0][1])));
			legSvg.append("rect")
					.attr("x", legW / 2 - progressWidth / 2)
					.attr("y", curY)
					.attr("rx", 3)
					.attr("ry", 3)
					.attr("width", progressWidth)
					.attr("height", progressHeight)
					.attr("stroke", highlightColor)
					.attr("stroke-width", 2)
					.attr("fill", "white")
					.attr("opacity", 0.5);

			legSvg.append("rect")
					.attr("id", "progress-bar")
					.attr("x", legW / 2 - progressWidth / 2)
					.attr("y", curY + progressHeight - (percent*progressHeight))
					.attr("rx", 3)
					.attr("ry", 3)
					.attr("width", progressWidth)
					.attr("height", percent*progressHeight)
					.attr("stroke", "none")
					.attr("fill", highlightColor)
					.attr("opacity", 0.5);
			legSvg.append("text")
					.attr("id", "progress-bar-text")
					.attr("text-anchor", "middle")
					.attr("x", legW / 2)
					.attr("y", curY + 20)
					.text((percent * 100).toFixed(0) + '%');

		<% end %>
	}

	function percentChange(d, i) {
		var percentChange = 0;
		if (i > 0) percentChange = (d[1] - dataset[i-1][1]) / dataset[i-1][1] * 100;
		return percentChange;
	}

</script>