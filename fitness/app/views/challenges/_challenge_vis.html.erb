<script style="text/javascript">

	// Dimensions and colors
	var w = 500;
	var h = 420;
	var barsW = 180;

	var xPadding = 45;
	var yPadding = 20;
	var barPadding = 3;

	var mainCircleColor = "#3FB8AF";
	var highlightColor = "#FF3D7F";
	var opacity = 1;


	// Read the data into an array
	dataset = [];
	<% challenge.users.each do |u| %>
		var curValues = [];
		<% u.trackers.find_by_challenge_id(challenge.id).points.each do |p| %>
			var curPoint = { timestamp: <%= p.created_at.strftime('%s') %>,
							 pointVal: <%= p.data %> };
			curValues.push(curPoint);
		<% end %>
		var curData = { id: <%= u.id %>,
						name: '<%= u.name %>', 
						values: curValues };
		dataset.push(curData);
	<% end %>

	// Sort the dataset in increasing order by the most recent point value
	dataset.sort(function(a, b) {
		if (a.values.length == 0) return 1;
		else if (b.values.length == 0) return -1;


		var lastAVal = a.values[a.values.length - 1].pointVal;
		var lastBVal = b.values[b.values.length - 1].pointVal;

		<% if challenge.category == 'highest_value' %>
			return lastBVal - lastAVal;
		<% elsif challenge.category == 'lowest_value' %>
			return lastAVal - lastBVal;
		<% end %>

		var firstAVal = a.values[0].pointVal;
		var firstBVal = b.values[0].pointVal;
		var aChange = lastAVal - firstAVal;
		var bChange = lastBVal - firstBVal;

		<% if challenge.category == 'greatest_increase' %>
			return bChange - aChange;
		<% elsif challenge.category == 'greatest_decrease' %>
			return aChange - bChange;
		<% elsif challenge.category == 'greatest_percent_increase' %>
			return (bChange / firstBVal) - (aChange / firstAVal);
		<% elsif challenge.category == 'greatest_percent_decrease' %>
			return (aChange / firstAVal) - (bChange / firstBVal);
		<% end %>

		var aSum = 0;
		for (var i = 0; i < a.values.length; i++) { aSum += a.values[i].pointVal; }
		var bSum = 0;
		for (var i = 0; i < b.values.length; i++) { bSum += b.values[i].pointVal; }
		<% if challenge.category == 'highest_cumulative' %>
			return bSum - aSum;
		<% elsif challenge.category == 'lowest_cumulative' %>
			return aSum - bSum;
		<% end %>
	});

	generateVis(dataset);

	// Create the visualization with the given dataset
	function generateVis(dataset) {
		// TODO: look into d3.time.scale() ?
		var date = new Date();
		var xScale = d3.scale.linear()
							 .domain([<%= challenge.start_date.strftime('%s') %> - 1,
									  Math.min(date.getTime() / 1000, <%= challenge.end_date.strftime('%s') %>)])
							 .range([xPadding, w - xPadding]);

		
		var yScale = d3.scale.linear()
							 .domain([0, d3.max(dataset, function(d) { 
							 	return d3.max(d.values, function(d) { return d.pointVal; });
							 })])
							 .range([h - yPadding, yPadding]);

		
		var radius = 8;

		var lineFunction = d3.svg.line()
		                          .x(function(d) { return xScale(d.timestamp); })
		                          .y(function(d) { return yScale(d.pointVal); })
		                          .interpolate("linear");

		var formatAsDate = function(d) { 
			date.setTime(d * 1000);
			return date.toLocaleDateString();
		};
		var formatAsUnits = function(d) { return d; };


		// Create SVG element
		var svg = d3.select("#challenge-svg-container-" + "<%= challenge.id %>")
					.append("svg")
					.attr("id", "svg" + <%= challenge.id %>)
					.attr("width", w)
					.attr("height", h);


		// Define X axis
		var xAxis = d3.svg.axis()
						  .scale(xScale)
						  .orient("bottom")
						  .ticks(5)
						  .tickFormat(formatAsDate);

		// Define Y axis
		var yAxis = d3.svg.axis()
						  .scale(yScale)
						  .orient("left")
						  .ticks(10)
						  .tickFormat(formatAsUnits);

		// Y axis label
		svg.append("text")
			.attr("id", "y-axis-label")
			.attr("class", "axis-label")
	        .attr("x", 0-(h/2))
	        .attr("y", 10)
	        .attr("transform", "rotate(-90) translate(0, 0)")
	        .style("text-anchor", "middle")
	        .text('<%= challenge.units %>');


		// Create X axis
		svg.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0," + (h - yPadding) + ")")
			.call(xAxis);
		
		// Create Y axis
		svg.append("g")
			.attr("class", "y axis")
			.attr("transform", "translate(" + xPadding + ",0)")
			.call(yAxis);

		// Display data
		var trackerLine = svg.selectAll(".tracker-line")
							.data(dataset)
							.enter()
							.append("g")
							.attr("class", "tracker-line");
		trackerLine.append("path")
					.attr("class", "line")
					.attr("id", function(d) {
						return "tracker-line-" + d.id;
					})
					.attr("d", function(d) { return lineFunction(d.values); })
					.style("stroke", mainCircleColor)
					.attr("stroke-width", 2)
					.attr("fill", "none")
					.on("mouseover", function(d) {
						d3.select(this).style("stroke", highlightColor);

						// highlight corresponding text
						barsSvg.select("#tracker-line-name-" + d.id).style("fill", highlightColor);
					})
					.on("mouseout", function(d) {
						d3.select(this).style("stroke", mainCircleColor);
						barsSvg.select("#tracker-line-name-" + d.id).style("fill", "black");
					});

		// TODO: Create SVG to show bars for each user
		var barScale = d3.scale.linear()
					 .domain([0, d3.max(dataset, function(d) { 
					 	return d3.max(d.values, function(d) { return d.pointVal; });
					 })])
					 .range([xPadding, barsW - xPadding]);

		var barHeight = Math.min(h / dataset.length - barPadding, 50);
		var barStartY = yPadding + 30;

		var barsSvg = d3.select("#challenge-svg-container-" + "<%= challenge.id %>")
						.append("svg")
						.attr("id", "barsSvg" + <%= challenge.id %>)
						.attr("class", "barsSvg")
						.attr("width", barsW)
						.attr("height", h);

		barsSvg.selectAll("text")
			   .data(dataset)
			   .enter()
			   .append("text")
			   .text(function(d, i) {
			   		if (d.values.length == 0) return (i+1) + ". " + d.name;

			   		var value = 0;
			   		var valueString = "";
			   		var f = 0;
			   		<% if challenge.category == 'highest_value' || challenge.category == 'lowest_value' %>
			   			value = d.values[d.values.length-1].pointVal;
			   			f = (value % 1 == 0 ? 0 : 1);
			   			valueString = value.toFixed(f) + " <%= challenge.units %>";
			   		<% elsif challenge.category == 'greatest_increase' || challenge.category == 'greatest_decrease' %>
			   			value = d.values[d.values.length-1].pointVal.toFixed(f) - d.values[0].pointVal;
			   			f = (value % 1 == 0 ? 0 : 1);
			   			valueString = value.toFixed(f) + " <%= challenge.units %>";
			   		<% elsif challenge.category == 'greatest_percent_increase' || challenge.category == 'greatest_percent_decrease' %>
			   			value = ((d.values[d.values.length-1].pointVal - d.values[0].pointVal) / d.values[0].pointVal) * 100;
			   			f = (value % 1 == 0 ? 0 : 1);
			   			valueString = value.toFixed(f) + "%";
			   		<% elsif challenge.category == 'highest_cumulative' || challenge.category == 'lowest_cumulative' %>
			   			for (var j = 0; j < d.values.length; j++) { value += d.values[j].pointVal; }
			   			f = (value % 1 == 0 ? 0 : 1);
			   			valueString = value.toFixed(f) + " <%= challenge.units %>";
			   		<% end %>
			   		return (i+1) + ". " + d.name + " (" + valueString + ")";
			   })
			   .attr("id", function(d) {
			   		return "tracker-line-name-" + d.id;
				})
			   .attr("x", 0)
			   .attr("y", function(d, i) {
			   		return barStartY + i*(17 + barPadding);
			   })
			   .attr("font-size", "14px")
			   .on("mouseover", function(d) {
					d3.select(this).style("fill", highlightColor);

					// Highlight corresponding line
					svg.select("#tracker-line-" + d.id).style("stroke", highlightColor);
			   })
			   .on("mouseout", function(d) {
			   		d3.select(this).style("fill", "black");
			   		svg.select("#tracker-line-" + d.id).style("stroke", mainCircleColor);
			   });	


		barsSvg.append("text")
				.attr("id", "barsSvg-header")
				.attr("text-anchor", "middle")
				.attr("x", barsW / 2)
				.attr("y", yPadding)
				.text("Current Rankings");



		

	}

	function percentChange(d, i) {
		var percentChange = 0;
		if (i > 0) percentChange = (d[1] - dataset[i-1][1]) / dataset[i-1][1] * 100;
		return percentChange
	}

</script>